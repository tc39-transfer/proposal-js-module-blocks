<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<pre class="metadata">
title: JavaScript Module Blocks
stage: 2
contributors: Surma, Dan Ehrenberg
</pre>

<emu-clause id="sec-primary-expression">
  <h1>Primary Expression</h1>
  <h2>Syntax</h2>
  <emu-grammar type="definition">
    PrimaryExpression[Yield, Await] :
      IdentifierReference[?Yield, ?Await]
      Literal
      ArrayLiteral[?Yield, ?Await]
      ObjectLiteral[?Yield, ?Await]
      FunctionExpression
      ClassExpression[?Yield, ?Await]
      GeneratorExpression
      AsyncFunctionExpression
      AsyncGeneratorExpression
      <ins>ModuleBlockExpression</ins>
      RegularExpressionLiteral
      TemplateLiteral[?Yield, ?Await, ~Tagged]
      CoverParenthesizedExpressionAndArrowParameterList[?Yield, ?Await] #parencover
  </emu-grammar>
</emu-clause>

<emu-clause id="sec-module-block-definitions">
  <h1>Module Block Definitions</h1>
  <h2>Syntax</h2>
  <emu-grammar type="definition">
    ModuleBlockExpression :
      `module` [no LineTerminator here] `{` ModuleBody? `}`
  </emu-grammar>

  <emu-clause id="sec-module-block-definitions-runtime-semantics-evaluation">
    <h1>Runtime Semantics: Evaluation</h1>
    <emu-grammar>PrimaryExpression : ModuleBlockExpression</emu-grammar>
    <emu-alg>
      1. Let _moduleBlock_ be OrdinaryObjectCreate(%ModuleBlock.prototype%,  &laquo; [[ModuleBlockBody]], [[SourceText]], [[HostDefinedResolutionBase]] &raquo;).
      1. Set _moduleBlock_.[[SourceText]] to the source text matched by |ModuleBlockExpression|.
      1. Let _parsedBody_ be ? ParseText(_body_, Module).
      1. Set _moduleBlock_.[[ModuleBlockBody]] to _parsedBody_.
      1. Let _currentScriptOrModule_ be GetActiveScriptOrModule().
      1. Set _moduleBlock_.[[HostDefinedResolutionBase]] to GetHostDefinedResolutionBase(_currentScriptOrModule_).
      1. Return _moduleBlock_.
    </emu-alg>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-moduleblock">
  <h1>ModuleBlock ( _body_ )</h1>
  <emu-alg>
    1. Throw a *TypeError* exception.
  </emu-alg>
</emu-clause>

<emu-clause id="sec-moduleblock.prototype">
  <h1>ModuleBlock.prototype</h1>
  <p>The initial value of `ModuleBlock.prototype` is the ModuleBlock prototype object.</p>
  <p>This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *false* }.</p>
</emu-clause>

<emu-clause id="sec-properties-of-the-moduleblock-prototype-object">
  <h1>Properties of the ModuleBlock Prototype Object</h1>
  <p>The <dfn>ModuleBlock prototype object</dfn>:</p>
  <ul>
    <li>is <dfn>%ModuleBlock.prototype%</dfn>.</li>
    <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>
    <li>is an ordinary object.</li>
  </ul>

  <emu-clause id="sec-moduleblock.prototype.tostring">
    <h1>ModuleBlock.prototype.toString ( )</h1>
    <p>The following steps are taken:</p>
    <emu-alg>
      1. Let _module_ be the *this* value.
      1. If Type(_module_) is Object and has the internal slot [[ModuleBlockBody]]
        1. Return _module_.[[SourceText]].
      1. Throw a *TypeError* exception.
    </emu-alg>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-import-calls">
  <h1>Import Calls</h1>

  <emu-clause id="sec-import-call-runtime-semantics-evaluation">
    <h1>Runtime Semantics: Evaluation</h1>

    <emu-grammar>ImportCall : `import` `(` AssignmentExpression `)`</emu-grammar>
    <emu-alg>
      1. Let _referencingScriptOrModule_ be GetActiveScriptOrModule().
      1. Let _argRef_ be the result of evaluating |AssignmentExpression|.
      1. Let _specifier_ be ? GetValue(_argRef_).
      1. Let _promiseCapability_ be ! NewPromiseCapability(%Promise%).
      1. <del>Let _specifierString_ be ToString(_specifier_).</del>
      1. <ins>If Type(_specifier_) is not Object or _specifier_ does not have the internal slot [[ModuleBlockBody]]</ins>
        1. <ins>Set _specifier_ to ToString(_specifier_).</ins>
        1. IfAbruptRejectPromise(<del>_specifierString_</del><ins>_specifier_</ins>, _promiseCapability_).
      1. Perform ! <del>HostImportModuleDynamically</del><ins>ImportModuleDynamically</ins>(_referencingScriptOrModule_, <del>_specifierString_</del><ins>_specifier_</ins>, _promiseCapability_).
      1. Return _promiseCapability_.[[Promise]].
    </emu-alg>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-executable-code-and-execution-contexts">
  <h1>Executable Code and Execution Contexts</h1>

  <emu-clause id="sec-code-realms">
    <h1>Realms</h1>
    <p>Before it is evaluated, all ECMAScript code must be associated with a <dfn id="realm" variants="realms">realm</dfn>. Conceptually, a realm consists of a set of intrinsic objects, an ECMAScript global environment, all of the ECMAScript code that is loaded within the scope of that global environment, and other associated state and resources.</p>
    <p>A realm is represented in this specification as a <dfn id="realm-record" variants="Realm Records">Realm Record</dfn> with the fields specified in <emu-xref href="#table-realm-record-fields"></emu-xref>:</p>
    <emu-table id="table-realm-record-fields" caption="Realm Record Fields" oldids="table-21">
      <table>
        <tr>
          <th>
            Field Name
          </th>
          <th>
            Value
          </th>
          <th>
            Meaning
          </th>
        </tr>
        <tr>
          <td>
            [[Intrinsics]]
          </td>
          <td></td>
          <td></td>
        </tr>
        <tr>
          <td>
            [[GlobalObject]]
          </td>
          <td></td>
          <td></td>
        </tr>
        <tr>
          <td>
            [[GlobalEnv]]
          </td>
          <td></td>
          <td></td>
        </tr>
        <tr>
          <td>
            [[TemplateMap]]
          </td>
          <td></td>
          <td></td>
        </tr>
        <tr>
          <td>
            <ins>[[ModuleMap]]</ins>
          </td>
          <td>
            <ins>a List of Record { [[HostDefinedResolutionBase]]: unknown or *null*, [[Specifier]]: String or Object, [[ModuleRecord]]: Module Record }</ins>
          </td>
          <td>
            <p><ins>Module Records are cached separately per Realm: two imports from the same realm using the same specifier from the same referencing script or module must resolve to the same Module Record.</ins></p>
            <p><ins>This List respects the following invariants:</ins></p>
            <ul>
              <li>
                <ins>It does not contain two Records _record1_ and _record2_ such that _record1_.[[HostDefinedResolutionBase]] is _record2_.[[HostDefinedResolutionBase]] and _record1_.[[Specifier]] is _record2_.[[Specifier]].</ins>
              </li>
              <li>
                <p><ins>For every Record _record_ it contains, if Type(_record_.[[Specifier]]) is Object then:</ins></p>
                <ul>
                  <li>
                    <ins>_record_.[[Specifier]] has a [[ModuleBlockBody]] internal slot.</ins>
                  </li>
                  <li>
                    <ins>_record_.[[HostDefinedResolutionBase]] is *null*.</ins>
                  </li>
                </ul>
              </li>
            </ul>
          </td>
        </tr>
        <tr>
          <td>
            [[HostDefined]]
          </td>
          <td></td>
          <td></td>
        </tr>
      </table>
    </emu-table>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-ecmascript-language-scripts-and-modules">
  <h1>ECMAScript Language: Scripts and Modules</h1>


  <emu-clause id="sec-scripts">
    <h1>Scripts</h1>

    <emu-clause id="sec-script-records">
      <h1>Script Records</h1>

      <p>A <dfn id="script-record" variants="Script Records">Script Record</dfn> encapsulates information about a script being evaluated. Each script record contains the fields listed in <emu-xref href="#table-script-records"></emu-xref>.</p>

      <emu-table id="table-script-records" caption="Script Record Fields">
        <table>
          <thead>
            <tr>
              <th>
                Field Name
              </th>
              <th>
                Value Type
              </th>
              <th>
                Meaning
              </th>
            </tr>
          </thead>
          <tr>
            <td>
              [[Realm]]
            </td>
            <td></td>
            <td></td>
          </tr>
          <tr>
            <td>
              [[ECMAScriptCode]]
            </td>
            <td></td>
            <td></td>
          </tr>
          <tr>
            <td>
              [[HostDefined]]
            </td>
            <td></td>
            <td></td>
          </tr>
          <tr>
            <td>
              <ins>[[HostDefinedResolutionBase]]</ins>
            </td>
            <td>
              <ins>anything</ins>
            </td>
            <td>
              <ins>Host-defined data passed to HostResolveImportedModule to resolve import specifiers. It is recursively copied from top-level scripts and modules to their nested ModuleBlocks.</ins>
            </td>
          </tr>
        </table>
      </emu-table>
    </emu-clause>

    <emu-clause id="sec-parse-script" type="abstract operation">
      <h1>
        ParseScript (
          _sourceText_: ECMAScript source text,
          _realm_: unknown,
          _hostDefined_: unknown,
          <ins>_hostDefinedResolutionBase_: unknown,</ins>
        ): a Script Record or a non-empty List of *SyntaxError* objects
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It creates a Script Record based upon the result of parsing _sourceText_ as a |Script|.</dd>
      </dl>

      <emu-alg>
        1. Let _script_ be ParseText(_sourceText_, |Script|).
        1. If _script_ is a List of errors, return _script_.
        1. Return Script Record { [[Realm]]: _realm_, [[ECMAScriptCode]]: _script_, [[HostDefined]]: _hostDefined_, <ins>[[HostDefinedResolutionBase]]: _hostDefinedResolutionBase_</ins> }.
      </emu-alg>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-modules">
    <h1>Modules</h1>

    <emu-clause id="sec-module-semantics">
      <h1>Module Semantics</h1>

      <emu-clause id="sec-source-text-module-records">
        <h1>Source Text Module Records</h1>

        <p>In addition to the fields defined in <emu-xref href="#table-cyclic-module-fields"></emu-xref>, Source Text Module Records have the additional fields listed in <emu-xref href="#table-additional-fields-of-source-text-module-records"></emu-xref>. Each of these fields is initially set in ParseModule.</p>
        <emu-table id="table-additional-fields-of-source-text-module-records" caption="Additional Fields of Source Text Module Records" oldids="table-38">
          <table>
            <tr>
              <th>
                Field Name
              </th>
              <th>
                Value Type
              </th>
              <th>
                Meaning
              </th>
            </tr>
            <tr>
              <td>
                [[ECMAScriptCode]]
              </td>
              <td></td>
              <td></td>
            </tr>
            <tr>
              <td>
                [[Context]]
              </td>
              <td></td>
              <td></td>
            </tr>
            <tr>
              <td>
                [[ImportMeta]]
              </td>
              <td></td>
              <td></td>
            </tr>
            <tr>
              <td>
                [[ImportEntries]]
              </td>
              <td></td>
              <td></td>
            </tr>
            <tr>
              <td>
                [[LocalExportEntries]]
              </td>
              <td></td>
              <td></td>
            </tr>
            <tr>
              <td>
                [[IndirectExportEntries]]
              </td>
              <td></td>
              <td></td>
            </tr>
            <tr>
              <td>
                [[StarExportEntries]]
              </td>
              <td></td>
              <td></td>
            </tr>
            <tr>
              <td>
                <ins>[[HostDefinedResolutionBase]]</ins>
              </td>
              <td>
                <ins>anything</ins>
              </td>
              <td>
                <p><ins>Host-defined data passed to HostResolveImportedModule to resolve import specifiers. It is recursively copied from top-level scripts and modules to their nested ModuleBlocks.</ins></p>
                <p><ins>It is *null* if the Module Record is an instantiation of a ModuleBlock defined in a context without an active script or module.</ins></in></p>
                <emu-note>
                  <ins>For example, hosts that use URL-based imports resolution could use [[HostDefinedResolutionBase]] to store the URL of file containing the current module.</ins>
                </emu-note>
                <emu-note>
                  <p><ins>An example of when [[HostDefinedResolutionBase]] can be *null* is in a web browser host. There, if a user clicks on a control given by</ins></p>

                  <pre><code class="html">&lt;button type="button" onclick="import(module {})"&gt;Click me&lt;/button&gt;</code></pre>

                  <p><ins>there will be no active script or module at the time the <emu-xref href="#sec-import-calls">`module {}`</emu-xref> expression runs.</ins></p>
                </emu-note>
              </td>
            </tr>
          </table>
        </emu-table>

        <emu-clause id="sec-parsemodule" type="abstract operation">
          <h1>
            ParseModule (
              _sourceText_: ECMAScript source text<ins> or a |Module| Parse Node</ins>,
              _realm_: unknown,
              _hostDefined_: unknown,
              <ins>_hostDefinedResolutionBase_: unknown,</ins>
            ): a Source Text Module Record or a non-empty List of *SyntaxError* objects
          </h1>
          <dl class="header">
            <dt>description</dt>
            <dd>It creates a Source Text Module Record based upon the result of parsing _sourceText_ as a |Module|. <ins>If _sourceText_ is a Parse Node, it always returns a Source Text Module Record.</ins></dd>
          </dl>
          <emu-alg>
            1. <ins>If _sourceText_ is a Parse Node,</ins>
              1. <ins>Let _body_ be _sourceText_.</ins>
            1. <ins>Else,</ins>
              1. Let _body_ be ParseText(_sourceText_, |Module|).
              1. If _body_ is a List of errors, return _body_.
            1. Let _requestedModules_ be the ModuleRequests of _body_.
            1. Let _importEntries_ be ImportEntries of _body_.
            1. Let _importedBoundNames_ be ImportedLocalNames(_importEntries_).
            1. Let _indirectExportEntries_ be a new empty List.
            1. Let _localExportEntries_ be a new empty List.
            1. Let _starExportEntries_ be a new empty List.
            1. Let _exportEntries_ be ExportEntries of _body_.
            1. For each ExportEntry Record _ee_ of _exportEntries_, do
              1. If _ee_.[[ModuleRequest]] is *null*, then
                1. If _ee_.[[LocalName]] is not an element of _importedBoundNames_, then
                  1. Append _ee_ to _localExportEntries_.
                1. Else,
                  1. Let _ie_ be the element of _importEntries_ whose [[LocalName]] is the same as _ee_.[[LocalName]].
                  1. If _ie_.[[ImportName]] is ~namespace-object~, then
                    1. NOTE: This is a re-export of an imported module namespace object.
                    1. Append _ee_ to _localExportEntries_.
                  1. Else,
                    1. NOTE: This is a re-export of a single name.
                    1. Append the ExportEntry Record { [[ModuleRequest]]: _ie_.[[ModuleRequest]], [[ImportName]]: _ie_.[[ImportName]], [[LocalName]]: *null*, [[ExportName]]: _ee_.[[ExportName]] } to _indirectExportEntries_.
              1. Else if _ee_.[[ImportName]] is ~all-but-default~, then
                1. Assert: _ee_.[[ExportName]] is *null*.
                1. Append _ee_ to _starExportEntries_.
              1. Else,
                1. Append _ee_ to _indirectExportEntries_.
            1. Let _async_ be _body_ Contains `await`.
            1. Return Source Text Module Record { [[Realm]]: _realm_, [[Environment]]: ~empty~, [[Namespace]]: ~empty~, [[CycleRoot]]: ~empty~, [[HasTLA]]: _async_, [[AsyncEvaluation]]: *false*, [[TopLevelCapability]]: ~empty~, [[AsyncParentModules]]: &laquo; &raquo;, [[PendingAsyncDependencies]]: ~empty~, [[Status]]: ~unlinked~, [[EvaluationError]]: ~empty~, [[HostDefined]]: _hostDefined_, <ins>[[HostDefinedResolutionBase]]: _hostDefinedResolutionBase_,</ins> [[ECMAScriptCode]]: _body_, [[Context]]: ~empty~, [[ImportMeta]]: ~empty~, [[RequestedModules]]: _requestedModules_, [[ImportEntries]]: _importEntries_, [[LocalExportEntries]]: _localExportEntries_, [[IndirectExportEntries]]: _indirectExportEntries_, [[StarExportEntries]]: _starExportEntries_, [[DFSIndex]]: ~empty~, [[DFSAncestorIndex]]: ~empty~ }.
          </emu-alg>
        </emu-clause>

        <emu-clause id="sec-gettoplevelscriptormodule" type="abstract operation">
          <h1>
            <ins>
              GetHostDefinedResolutionBase (
                _currentScriptOrModule_: a Script Record, a Module Record, or null
              ): unknown, or null
            </ins>
          </h1>
          <dl class="header"></dl>

          <emu-alg>
            1. If _currentScriptOrModule_ is *null*, then
              1. Return *null*.
            1. Return _currentScriptOrModule_.[[HostDefinedResolutionBase]].
          </emu-alg>
        </emu-clause>
      </emu-clause>

      <emu-clause id="sec-resolveimportedmodule" type="abstract operation">
        <h1>
          <ins>
            ResolveImportedModule (
              _referencingScriptOrModule_: a Script Record, a Module Record, or *null*,
              _specifier_: a String or an Object with a [[ModuleBlockBody]] internal slot,
            ): either a normal completion containing a Module Record or a throw completion
          </ins>
        </h1>
        <dl class="header"></dl>

        <emu-alg>
          1. Assert: If Type(_specifier_) is Object, then _referencingScriptOrModule_ is *null*.
          1. Set _resolutionBase_ to GetHostDefinedResolutionBase(_referencingScriptOrModule_).
          1. Let _currentRealm_ be the current Realm Record.
          1. If there exists a Record _record_ in _currentRealm_.[[ModuleMap]] such that _record_.[[HostDefinedResolutionBase]] is _resolutionBase_ and _record_.[[Specifier]] is _specifier_, then
            1. Return NormalCompletion(_record_.[[ModuleRecord]]).
          1. Assert: Type(_specifier_) is String.
          1. Let _completion_ be Completion(HostResolveImportedModule(_resolutionBase_, _specifier_)).
          1. If _completion_ is a normal completion, then
            1. Add Record { [[HostDefinedResolutionBase]]: _resolutionBase_, [[Specifier]]: _specifier_, [[ModuleRecord]]: _completion_.[[Value]] } to _currentRealm_.[[ModuleMap]].
          1. Return _completion_.
        </emu-alg>

        <emu-note type="editor">
          Replace all the references to HostResolveImportedModule in the ecma262 specification with ResolveImportedModule.
        </emu-note>
      </emu-clause>

      <emu-clause id="sec-hostresolveimportedmodule" type="host-defined abstract operation">
        <h1>
          HostResolveImportedModule (
            <del>_referencingScriptOrModule_: a Script Record, a Module Record, or *null*,</del>
            <ins>_resolutionBase_: unknown,</ins>
            _specifier_: a String,
          ): either a normal completion containing a Module Record or a throw completion
        </h1>
        <dl class="header">
          <dt>description</dt>
          <dd></dd>
        </dl>

        <p>An implementation of HostResolveImportedModule must conform to the following requirements:</p>
        <ul>
          <li>
            If the returned Completion Record is a normal completion, it must be a normal completion containing an instance of a concrete subclass of Module Record.
          </li>
          <li>
            If a Module Record corresponding to the pair (<del>_referencingScriptOrModule_</del><ins>_resolutionBase_</ins>, _specifier_) does not exist or cannot be created, an exception must be thrown.
          </li>
          <li>
            <del>Each time this operation is called with a specific _referencingScriptOrModule_, _specifier_ pair as arguments it must return the same Module Record instance if it completes normally.</del>
          </li>
        </ul>
      </emu-clause>

      <emu-clause id="sec-importmoduledynamically" type="abstract operation">
        <h1>
          <ins>
            ImportModuleDynamically (
              _referencingScriptOrModule_: a Script Record, a Module Record, or *null*,
              _specifier_: a String or an Object with a [[ModuleBlockBody]] internal slot,
              _promiseCapability_: a PromiseCapability Record,
            ): ~unused~
          </ins>
        </h1>
        <dl class="header">
          <dt>description</dt>
          <dd>It performs any necessary setup work in order to make available the module corresponding to _specifier_ occurring within the context of the script or module represented by _referencingScriptOrModule_. _referencingScriptOrModule_ may be *null* if there is no active script or module when the <emu-xref href="#sec-import-calls">`import()`</emu-xref> expression occurs. It then performs FinishDynamicImport to finish the dynamic import process.</dd>
        </dl>

        <emu-alg>
          1. If Type(_specifier_) is Object, then
            1. Set _referencingScriptOrModule_ to *null*.
          1. Let _success_ be a new Abstract Closure that captures _referencingScriptOrModule_, _specifier_, and _promiseCapability_ and performs the following steps when called:
            1. Let _promise_ be ! PromiseResolve(%Promise%, *undefined*).
            1. Perform FinishDynamicImport(_referencingScriptOrModule_, _specifier_, _promiseCapability_, _promise_).
          1. Let _failure_ be a new Abstract Closure with parameters (_error_) that captures _referencingScriptOrModule_, _specifier_, and _promiseCapability_ and performs the following steps when called:
            1. Let _pc_ be ! NewPromiseCapability(%Promise%).
            1. Perform ! Call(_pc_.[[Reject]], *undefined*, &laquo; _error_ &raquo;).
            1. Perform FinishDynamicImport(_referencingScriptOrModule_, _specifier_, _promiseCapability_, _pc_.[[Promise]]).
          1. Let _currentRealm_ be the current Realm Record.
          1. If there exists a Record _record_ in _currentRealm_.[[ModuleMap]] such that _record_.[[HostDefinedResolutionBase]] is _resolutionBase_ and _record_.[[Specifier]] is _specifier_, then
            1. Perform _success_().
          1. Else if Type(_specifier_) is Object, then
            1. Perform ImportModuleBlockDynamically(_specifier_, _success_, _failure_).
          1. Else,
            1. Perform HostImportModuleDynamically(_referencingScriptOrModule_, _specifier_, _success_, _failure_).
        </emu-alg>
      </emu-clause>

      <emu-clause id="sec-importmoduleblockdynamically" type="abstract operation">
        <h1>
          <ins>
            ImportModuleBlockDynamically (
              _moduleBlock_: an Object with a [[ModuleBlockBody]] internal slot,
              _success_: an Abstract Closure,
              _failure_: an Abstract Closure,
            ): ~unused~
          </ins>
        </h1>
        <dl class="header">
          <dt>description</dt>
          <dd>It links and evaluates the module represented by _moduleBlock_, and if it succeeds it adds the resulting Module Record to the current Realm Record's [[ModuleMap]] List.</dd>
        </dl>

        <emu-alg>
          1. Let _currentRealm_ be the current Realm Record.
          1. TODO: HTML uses the _moduleRecord_.[[HostDefined]] slot (_hostDefined_) to associate some extra data to modules, for example a list to keep track of unhandled promise rejections and some fetch options to fetch the imported modules. We might need a new host hook to generate the contents of this slot.
          1. Let _moduleRecord_ be ParseModule(_moduleBlock_.[[ModuleBlockBody]], _currentRealm_, _hostDefined_, _moduleBlock_.[[HostDefinedResolutionBase]]).
          1. Assert: _moduleRecord_ is a Source Text Module Record.
          1. Set _moduleRecord_.[[TopLevelScriptOrModule]] to _moduleBlock_.[[TopLevelScriptOrModule]].
          1. Let _linkResult_ be Completion(_moduleRecord_.Link()).
          1. If _linkResult_ is an abrupt completion, then
            1. Perform _failure_(_linkResult_.[[Value]]).
            1. Return ~unused~.
          1. Let _evaluationPromise_ be _moduleRecord_.Evaluate().
          1. Let _fulfilledClosure_ be a new Abstract Closure that captures _success_, _currentRealm_ and _moduleRecord_ and performs the following steps when called:
            1. If there exists a Record _record_ in _currentRealm_.[[ModuleMap]] such that _record_.[[Specifier]] is _specifier_, then
              1. Assert: _record_.[[ModuleRecord]] is _moduleRecord_.
              1. TODO: Check if this is enough to protect against concurrent calls to ImportModuleBlockDynamically with the same _moduleBlock_. We do not want to insert the record twice.
            1. Else,
              1. Add Record { [[HostDefinedResolutionBase]]: *null*, [[Specifier]]: _specifier_, [[ModuleRecord]]: _moduleRecord_ } to _currentRealm_.[[ModuleMap]].
            1. Perform _success_().
          1. Let _onRejected_ be CreateBuiltinFunction(_failure_, 1, *""*, &laquo; &raquo;).
          1. Perform PerformPromiseThen(_evaluationPromise_, _onFulfilled_, _onRejected_).
          1. Return ~unused~.
        </emu-alg>
      </emu-clause>

      <emu-clause id="sec-hostimportmoduledynamically" type="host-defined abstract operation">
        <h1>
          HostImportModuleDynamically (
            _referencingScriptOrModule_: a Script Record, a Module Record, or *null*,
            _specifier_: a String,
            <del>_promiseCapability_: a PromiseCapability Record,</del>
            <ins>_success_: an Abstract Closure,</ins>
            <ins>_failure_: an Abstract Closure,</ins>
          ): ~unused~
        </h1>
        <dl class="header">
          <dt>description</dt>
          <dd></dd>
        </dl>
        <p>An implementation of HostImportModuleDynamically must conform to the following requirements:</p>
        <ul>
          <li>
            It must return ~unused~. Success or failure must instead be signaled as discussed below.
          </li>
          <li>
            The host environment must conform to one of the two following sets of requirements:
            <dl>
              <dt>Success path</dt>

              <dd>
                <ul>
                  <li>At some future time, the host environment must perform <del>FinishDynamicImport(_referencingScriptOrModule_, _specifier_, _promiseCapability_, _promise_), where _promise_ is a Promise resolved with *undefined*</del><ins>_success_()</ins>.</li>

                  <li>Any subsequent call to HostResolveImportedModule after <del>FinishDynamicImport</del><ins>_success_</ins> has completed, given the arguments _referencingScriptOrModule_ and _specifier_, must return a normal completion containing a module which has already been evaluated, i.e. whose Evaluate concrete method has already been called and returned a normal completion.</li>
                </ul>
              </dd>

              <dt>Failure path</dt>

              <dd>
                <ul>
                  <li>At some future time, the host environment must perform <del>FinishDynamicImport(_referencingScriptOrModule_, _specifier_, _promiseCapability_, _promise_)</del><ins>_failure_(_error_)</ins>, where <del>_promise_</del><ins>_error_</ins> is <del>a Promise rejected with</del> an error representing the cause of failure.</li>
                </ul>
              </dd>
            </dl>
          </li>
          <li>
            <del>If the host environment takes the success path once for a given _referencingScriptOrModule_, _specifier_ pair, it must always do so for subsequent calls.</del>
          </li>
          <li>
            <del>The operation must not call _promiseCapability_.[[Resolve]] or _promiseCapability_.[[Reject]], but instead must treat _promiseCapability_ as an opaque identifying value to be passed through to FinishDynamicImport.</del>
          </li>
        </ul>

        <p>The actual process performed is host-defined, but typically consists of performing whatever I/O operations are necessary to allow HostResolveImportedModule to synchronously retrieve the appropriate Module Record, and then calling its Evaluate concrete method. This might require performing similar normalization as HostResolveImportedModule does.</p>
      </emu-clause>
    </emu-clause>
  </emu-clause>
</emu-clause>
